name: Deploy Java App to AWS ASG

on:
  workflow_dispatch: 
  push:
    branches:
      - main

jobs:
  Build:
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Install Maven 3.3
        run: |
          sudo apt update -y
          sudo apt install maven -y
          mvn -version

      - name: Build Java Application
        run: |
          mvn clean package
          pwd

      - name: Cache Maven Dependencies
        id: maven-cache
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: Maven-Cache-self-hosted
          restore-keys: Maven-Cache-self-hosted

  Docker-Build-Push:
    runs-on: self-hosted
    needs: [Build]
    steps:
      - name: aws cred
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ secrets.AWS_REGION }}'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get commit hash
        id: get-commit-hash
        run: echo "commit-hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Get timestamp
        id: get-timestamp
        run: echo "timestamp=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: "${{ env.commit-hash }}-${{ env.timestamp }}"
        run: |
          #docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          #echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:latest" >> "$GITHUB_OUTPUT"
          
          #echo "test=world" >> "$GITHUB_OUTPUT"
          #echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  ECS-Task:
    runs-on: self-hosted
    needs: [Build, Docker-Build-Push]
    env:
     IMAGE_TAG: ${{ github.sha }}  
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
        aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
        aws-region: '${{ secrets.AWS_REGION }}'

    - name: Register new task definition
      id: register-task-def
      run: |
        set -e
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --family Akshay-Fargate-Dev-Cluster-TD \
          --network-mode awsvpc \
          --execution-role-arn arn:aws:iam::543816070942:role/ecsTaskExecutionRole \
          --container-definitions '[{
            "name": "Java-API-Service-111",
            "image": "543816070942.dkr.ecr.us-east-1.amazonaws.com/javaappakshay:${{ env.IMAGE_TAG }}",
            "memory": 512,
            "cpu": 256,
            "essential": true,
            "portMappings": [{"containerPort": 8080}]
          }]' --query 'taskDefinition.taskDefinitionArn' --output text)
        if [ -z "$TASK_DEF_ARN" ]; then
          echo "Task definition registration failed!" >&2
          exit 1
        fi
        echo "taskDefinitionArn=$TASK_DEF_ARN" >> "$GITHUB_OUTPUT"

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.register-task-def.outputs.taskDefinitionArn }}
        service: Java-API-Service-111
        cluster: Akshay-Fargate-Dev-Cluster
        wait-for-service-stability: true
