name: Deploy Java App to AWS ASG

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17' # Adjust based on your application's requirements

    - name: Build Java Application
      run: |
        mvn clean package
        pwd

  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Upload artifact to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        aws s3 cp target/*.jar s3://test-soham-bucket/

    - name: Create New AMI
      id: create_ami
      run: |
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=restapi-app-soham" --query "Reservations[*].Instances[0].InstanceId" --output text)
        AMI_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name "restapi-app-soham-$(date +'%Y-%m-%d-%H-%M')" --no-reboot --query "ImageId" --output text)
        echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Create Launch Template
      id: create_launch_template
      run: |
        aws ec2 delete-launch-template --launch-template-name "restapi-app-soham-template"
        USER_DATA=$(echo "#!/bin/bash
        
        nohup java -jar /home/ubuntu/deploy/*.jar > app.log 2>&1" | base64)
        
        LAUNCH_TEMPLATE_ID=$(aws ec2 create-launch-template \
          --launch-template-name "restapi-app-soham-template" \
          --version-description "Initial version" \
          --launch-template-data "{
            \"ImageId\": \"${{ env.AMI_ID }}\",
            \"InstanceType\": \"t2.small\",
            \"KeyName\": \"soham-alm\",
            \"SecurityGroupIds\": [\"sg-0deb3a1062983c0ba\"],
            \"UserData\": \"$USER_DATA\"
          }" \
          --query "LaunchTemplate.LaunchTemplateId" --output text)
        echo "LAUNCH_TEMPLATE_ID=$LAUNCH_TEMPLATE_ID" >> $GITHUB_ENV

    - name: Create Auto Scaling Group
      run: |
        aws autoscaling create-auto-scaling-group \
          --auto-scaling-group-name "restapi-app-soham-asg" \
          --launch-template "LaunchTemplateId=${{ env.LAUNCH_TEMPLATE_ID }},Version=1" \
          --min-size 1 \
          --max-size 2 \
          --desired-capacity 2 \
          --vpc-zone-identifier "subnet-985765b3"
    
    # - name: Update Launch Template
    #   run: |
    #     TEMPLATE_ID=$(aws ec2 describe-launch-templates --filters "Name=tag:Name,Values=restapi-app-soham-temp" --query "LaunchTemplates[0].LaunchTemplateId" --output text)
    #     echo $TEMPLATE_ID
    #     aws ec2 create-launch-template-version \
    #       --launch-template-id $TEMPLATE_ID \
    #       --version-description "New version with updated AMI" \
    #       --source-version 1 \
    #       --launch-template-data "{\"ImageId\":\"$AMI_ID\"}"
        
    #     NEW_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-id $TEMPLATE_ID --query "LaunchTemplateVersions[-1].VersionNumber" --output text)
    #     aws ec2 modify-launch-template \
    #       --launch-template-id $TEMPLATE_ID \
    #       --default-version $NEW_VERSION
    #   env:
    #     AMI_ID: ${{ env.AMI_ID }}
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
        
    # - name: Trigger ASG Rolling Update
    #   run: |
    #     aws autoscaling start-instance-refresh \
    #       --auto-scaling-group-name my-auto-scaling-group \
    #       --preferences '{"MinHealthyPercentage": 50, "InstanceWarmup": 300}'
    #   env:
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
  

        
    # - name: Set up SSH key
    #   run: |
    #     mkdir -p ~/.ssh
    #     echo "$EC2_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    #     chmod 600 ~/.ssh/id_rsa
    #   env:
    #     EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }} 

    # - name: Add EC2 instance to known hosts
    #   run: |
    #     ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts


    # - name: Deploy to EC2
    #   run: |
    #     ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ secrets.EC2_PUBLIC_IP }} <<EOF
    #       aws s3 cp s3://test-soham-bucket/ /home/ubuntu/deploy --recursive
    #       # java -jar /home/ubuntu/deploy/*.jar
    #       nohup java -jar /home/ubuntu/deploy/*.jar > app.log 2>&1 &
    #     EOF
    #   env:
    #     EC2_PUBLIC_IP: ${{ secrets.EC2_PUBLIC_IP }}
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
        

 
